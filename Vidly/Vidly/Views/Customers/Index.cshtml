@using System.Security.Cryptography
@model IEnumerable<Vidly.Models.Customer>
@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="navbar-fix-wrap-h">
    <h2>Customers</h2>
</div>


@Html.ActionLink("New Customer", "New", "Customers", new { Id = 0 }, new { @class = "btn btn-lg btn-primary" })

@if (!Model.Any())
{
    <div class="navbar-fix-wrap-h">
        <h2>No Customers</h2>
    </div>
}
else

{
    //Use a table skeleton so datatables can fill upon it
    <table id="tableCustomers" class="table table-hover table-bordered">

        <thead>
            <tr>
                <th>Customers</th>
                <th>Discount Rate</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>

            @*rendering customers table on the server
                @foreach (var customer in Model)
                {
                    <tr>
                        <td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, null)</td>
                        <td>@customer.MembershipType.Name</td>
                        <td>
                            <button data-customer-id="@customer.Id" class="btn btn-link js-delete"><span class="glyphicon glyphicon-trash text-danger"></span> Delete</button>
                        </td>
                    </tr>
                }*@
        </tbody>
    </table>
}
@section scripts{
    <script>

        $(document).ready(function () {

            //datatables , add utilities to an already existing table generated by the server as html
            // $("tableCustomers").DataTable();

            //datatables generate table from api json
            var table = $("#tableCustomers").DataTable({
                "drawCallback": function () {
                    fixDataTables();
                },
                ajax: {
                    url: "/api/customers", //api
                    dataSrc: "" //name of the object that holds the data , we only return an array that has no name so it's an empty string
                },
                columns: [
                    //first column, customer's name
                    {
                        data: "name", //customer name , correspond to the value in the json object sent from the api
                        //to make a link on the customer name (this function will be called to render each row in the table)
                        render: function (data, type, customer) {
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>";
                        }
                    },
                    //second column, membership type
                    {
                        data: "membershipType.name"
                    },
                    //third column, delete button
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn btn-danger btn-custom js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });
            //on table draw fix datatables,because it messes with Ajax
            //$('#tableCustomers').on('draw.dt', function () {
            //    fixDataTables();
            //});
            ////these buttons messes up when having multiple pages
            //$(".paginate_button,.paginate_button.previous,.paginate_button.next").on('click',
            //    function () {
            //        fixDataTables();
            //    });

            $("#tableCustomers").on("click",
                ".js-delete",//filter , the handler is hooked to only one selector tableCustomers
                //instead of tableCustomers .js-delete which gives every button on the page it's own handler
                //here when there's a click anywhere on the table , and the filter is matched , the callback function will be called
                function () {
                    var button = $(this);
                    bootbox.confirm("Are you sure you want to delete this customer ?",
                        function (result) {
                            if (result) {
                                $.ajax({
                                    url: "/api/customers/" + button.attr("data-customer-id"),
                                    method: "DELETE",
                                    success: function () {
                                        //button.parents("tr").remove(); here we're just removing the tr object , problem with datatables
                                        //here we are using the reference to datatables(table)
                                        //then we reference the row button.parents("tr")
                                        //them we remove it from both our dom the datatables internal Json list and we redraw the table
                                        table.row(button.parents("tr")).remove().draw();
                                        fixDataTables();
                                    }
                                });
                            }
                        });
                });
        });
    </script>
}